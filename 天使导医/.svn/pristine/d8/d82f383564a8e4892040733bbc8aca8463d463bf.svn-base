package com.hsk.angeldoctor.web.hospital.service.imp;

import java.util.*;
import org.springframework.stereotype.*;
import org.springframework.beans.factory.annotation.Autowired;
import com.hsk.supper.dto.comm.PagerModel;
import com.hsk.supper.dto.comm.SysRetrunMessage;
import com.hsk.supper.until.javaclass.ClassUtil;
import com.hsk.xframe.api.service.imp.DSTService;
import com.hsk.exception.HSKDBException;
import com.hsk.exception.HSKException;
import com.hsk.angeldoctor.web.hospital.service.*;
import com.hsk.angeldoctor.api.persistence.*;
import com.hsk.angeldoctor.api.daobbase.*;


/** 
  hospital业务操作实现类 
 * @author  作者:admin
 * @version  版本信息:v1.0   创建时间: 2018-08-14 13:27:59
 */
 
@Service
public class  AgDepartmentInfoService extends DSTService implements IAgDepartmentInfoService {	
   /**
   *业务处理dao类  agDepartmentInfoDao 
   */
	@Autowired
	protected IAgDepartmentInfoDao agDepartmentInfoDao;
	@Autowired
	protected IAgDoctorInfoDao agDoctorInfoDao;


 /**
	 * 根据ag_department_info表主键删除AgDepartmentInfo对象记录
     * @param  departmentId  Integer类型(ag_department_info表主键)
	 * @return SysRetrunMessage 对象记录
	 * @throws HSKException
	 */

	public SysRetrunMessage findFormObject(Integer departmentId) throws HSKException{
	        SysRetrunMessage srm=new SysRetrunMessage(1l);
			  	
			try{
		   			AgDepartmentInfo     att_AgDepartmentInfo= agDepartmentInfoDao.findAgDepartmentInfoById( departmentId) ;
					srm.setObj(att_AgDepartmentInfo);
				} catch (HSKDBException e) {
					e.printStackTrace(); 
					srm.setCode(0l);
					srm.setMeg(e.getMessage()); 
				}
				 return srm ;
	} 

    /**
	 * 根据ag_department_info表主键删除AgDepartmentInfo对象记录
     * @param  departmentId  Integer类型(ag_department_info表主键)
	 * @throws HSKException
	 */

	public AgDepartmentInfo findObject(Integer departmentId) throws HSKException{
			AgDepartmentInfo  att_AgDepartmentInfo=new AgDepartmentInfo();		
			try{
		        att_AgDepartmentInfo= agDepartmentInfoDao.findAgDepartmentInfoById( departmentId) ;
				} catch (HSKDBException e) {
					e.printStackTrace(); 
					throw new  HSKException(e);
				}
				return  att_AgDepartmentInfo;
	}
	
	 
	 /**
	 * 根据ag_department_info表主键删除AgDepartmentInfo对象记录
     * @param  departmentId  Integer类型(ag_department_info表主键)
     * @return SysRetrunMessage 对象记录
	 * @throws HSKException
	 */
	public SysRetrunMessage deleteObject(Integer departmentId) throws HSKException{  
		    SysRetrunMessage srm=new SysRetrunMessage(1l);
		   try{ 
				agDepartmentInfoDao.deleteAgDepartmentInfoById(departmentId);
			 } catch (Exception e) {
					e.printStackTrace(); 
					throw new  HSKException(e);
		     }
		   return srm;  
	}
	
	/**
	 * 根据ag_department_info表主键删除多条AgDepartmentInfo对象记录
     * @param  DepartmentIds  Integer类型(ag_department_info表主键)
     * @return SysRetrunMessage 对象记录
	 * @throws HSKException
	 */
	public SysRetrunMessage deleteAllObject(String departmentIds) throws HSKException{
		SysRetrunMessage srm = new SysRetrunMessage(1l);
		try {
			String[] ids = departmentIds.split(",");
			for (String did : ids) {
				if (did != null && !"".equals(did.trim())) {
					agDepartmentInfoDao.deleteAgDepartmentInfoById(Integer
							.valueOf(did));
				}
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			HSKException hse = new HSKException(e);
			hse.setDisposeType("01");
			throw hse;
		} catch (HSKDBException e) {
			e.printStackTrace();
			throw new HSKException(e);
		}
		return srm;	  
	 }
	 
 
	 /**
	 * 新增或修改ag_department_info表记录 ,如果ag_department_info表主键AgDepartmentInfo.DepartmentId为空就是添加，如果非空就是修改
     * @param  att_AgDepartmentInfo  AgDepartmentInfo类型(ag_department_info表记录)
     * @return AgDepartmentInfo  修改后的AgDepartmentInfo对象记录
	 * @throws HSKDBException
	 */
	public SysRetrunMessage saveOrUpdateObject( AgDepartmentInfo att_AgDepartmentInfo) throws HSKException{
			 SysRetrunMessage srm = new SysRetrunMessage(1l);
			  try{
				  	if(this.GetOneSessionAccount().getUserType()==2){//如果是医院管理员登录
					  att_AgDepartmentInfo.setOrganizationId(this.GetOneSessionAccount().getSroleId());
				  	}else if(this.GetOneSessionAccount().getUserType()==3){//如果是医生登录
						AgDoctorInfo att_AgDoctorInfo= agDoctorInfoDao.findAgDoctorInfoById(this.GetOneSessionAccount().getSroleId());
						att_AgDepartmentInfo.setOrganizationId(att_AgDoctorInfo.getOrganizationId());
					}
				  	//检查科室名称是否重复
				  	AgDepartmentInfo checkInfo = new AgDepartmentInfo();
				  	checkInfo.setName(att_AgDepartmentInfo.getName());
				  	checkInfo.setOrganizationId(att_AgDepartmentInfo.getOrganizationId());
				  	List<AgDepartmentInfo> checkList = agDepartmentInfoDao.getListByAgDepartmentInfo(checkInfo);
				  	if(checkList !=null && checkList.size() >0){
				  		boolean isSec=false;
				  		if(att_AgDepartmentInfo.getDepartmentId()!=null){
				  			for(AgDepartmentInfo xInfo : checkList){
					  			if(xInfo.getDepartmentId().equals(att_AgDepartmentInfo.getDepartmentId()))
					  				checkInfo=xInfo;
					  			else
					  				isSec=true;
					  		}
				  		}else
				  			isSec=true;
				  		if(isSec){
				  			srm.setCode(0l);
					    	srm.setMeg("科室名已被占用！");
					    	return srm;
				  		}
				  	}
				    if(att_AgDepartmentInfo.getDepartmentId()!=null){
				    	if(checkInfo==null || checkInfo.getDepartmentId()==null)
				    		checkInfo = agDepartmentInfoDao.findAgDepartmentInfoById(att_AgDepartmentInfo.getDepartmentId());
				    	if(checkInfo.getName()!=null && att_AgDepartmentInfo.getName()!=null &&
				    			!checkInfo.getName().trim().equals(att_AgDepartmentInfo.getName().trim())){
				    		//修改对应医生信息
							AgDoctorInfo att_AgDoctorInfo = new AgDoctorInfo();
							att_AgDoctorInfo.setDepartmentId(","+att_AgDepartmentInfo.getDepartmentId()+",");
							att_AgDoctorInfo.setTab_like("departmentId");
							List<AgDoctorInfo> docList = agDoctorInfoDao.getListByAgDoctorInfo(att_AgDoctorInfo);
							if(docList != null && docList.size() >0){
								for(AgDoctorInfo info : docList){
									info.setDepartmentName(info.getDepartmentName().replace(","+checkInfo.getName()+",", ","+att_AgDepartmentInfo.getName()+","));
									agDoctorInfoDao.saveOrUpdateAgDoctorInfo(info);
								}
							}
				    	}
				    	checkInfo.setName(att_AgDepartmentInfo.getName());
				    	checkInfo.setVisible(att_AgDepartmentInfo.getVisible());
				    	checkInfo.setRegToDepartment(att_AgDepartmentInfo.getRegToDepartment());
				    	agDepartmentInfoDao.saveOrUpdateAgDepartmentInfo(checkInfo);
				    }else
				    	agDepartmentInfoDao.saveOrUpdateAgDepartmentInfo(att_AgDepartmentInfo); 
					srm.setObj(att_AgDepartmentInfo);
			    } catch (Exception e) {
			    	srm.setCode(0l);
			    	srm.setMeg("操作失败！");
					e.printStackTrace(); 
					throw new HSKException(e);
		        }
			return srm;	  
	}
	
	 
	/**
	 *根据AgDepartmentInfo对象作为对(ag_department_info表进行查询，获取分页对象
     * @param  att_AgDepartmentInfo  AgDepartmentInfo类型(ag_department_info表记录)
     * @return PagerModel  分页对象
	 * @throws HSKException 
	 */
	public PagerModel getPagerModelObject (AgDepartmentInfo att_AgDepartmentInfo) throws HSKException{
		PagerModel pm=new PagerModel(new ArrayList<AgDepartmentInfo>());
			  try{
				  if(this.GetOneSessionAccount().getUserType()==2){//如果是医院管理员登录
					  att_AgDepartmentInfo.setOrganizationId(this.GetOneSessionAccount().getSroleId());
					}else if(this.GetOneSessionAccount().getUserType()==3){//如果是医生登录
						AgDoctorInfo att_AgDoctorInfo= agDoctorInfoDao.findAgDoctorInfoById(this.GetOneSessionAccount().getSroleId());
						att_AgDepartmentInfo.setOrganizationId(att_AgDoctorInfo.getOrganizationId());
					}
					pm=agDepartmentInfoDao.getPagerModelByAgDepartmentInfo(att_AgDepartmentInfo);
			    } catch (Exception e) {
					e.printStackTrace(); 
		        }
		return pm;
	}

	@Override
	public List<AgDepartmentInfo> getAgDepartmentInfoList(AgDepartmentInfo att_AgDepartmentInfo) throws HSKException {
		List<AgDepartmentInfo> reList = new ArrayList<AgDepartmentInfo>();
		try {
			reList = agDepartmentInfoDao.getListByAgDepartmentInfo(att_AgDepartmentInfo);
		} catch (HSKDBException e) {
			e.printStackTrace();
		}
		return reList;
	} 
	 
}